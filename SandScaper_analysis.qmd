---
title: "SandScaper_analysis"
format: 
  html: 
    toc: true
    embed-resources: true
---

# Preprocessing

## Setup

```{r message=FALSE}

# Suppress summarise info
options(dplyr.summarise.inform = FALSE)

library(tidyverse)
library(knitr)

```

## Read raw data

```{r message=FALSE}
# read data

data_raw <- read_csv("data/data.csv")

head(data_raw)
```

## define factors

```{r}
data_pp <- data_raw


# factors
data_pp <- data_pp %>%
  mutate(
    id = factor(id),
    system = factor(system),
    image = factor(image)
  )
```

## Calculate UEQ scores (take means and subtract 4)

```{r}
data_long <- data_pp %>%
  group_by(id, system, image, age, gender, pre_experience, creativity, time_s, result_satisfaction) %>%
  summarise(
    UEQ_Efficiency_Score = mean(c(UEQ_Efficiency_1, UEQ_Efficiency_2, UEQ_Efficiency_3, UEQ_Efficiency_4)) - 4,
    UEQ_Perspicuity_Score = mean(c(UEQ_Perspicuity_1, UEQ_Perspicuity_2, UEQ_Perspicuity_3, UEQ_Perspicuity_4)) - 4,
    UEQ_Dependability_Score = mean(c(UEQ_Dependability_1, UEQ_Dependability_2, UEQ_Dependability_3, UEQ_Dependability_4)) - 4,
    UEQ_Stimulation_Score = mean(c(UEQ_Stimulation_1, UEQ_Stimulation_2, UEQ_Stimulation_3, UEQ_Stimulation_4)) - 4,
    UEQ_Novelty_Score = mean(c(UEQ_Novelty_1, UEQ_Novelty_2, UEQ_Novelty_3, UEQ_Novelty_4)) - 4,
    UEQ_Haptics_Score = mean(c(UEQ_Haptics_1, UEQ_Haptics_2, UEQ_Haptics_3, UEQ_Haptics_4)) - 4,
    UEQ_Adaptability_Score = mean(c(UEQ_Adaptability_1, UEQ_Adaptability_2, UEQ_Adaptability_3, UEQ_Adaptability_4)) - 4,
    UEQ_Usefulness_Score = mean(c(UEQ_Usefulness_1, UEQ_Usefulness_2, UEQ_Usefulness_3, UEQ_Usefulness_4)) - 4,
    UEQ_IntuitiveUse_Score = mean(c(UEQ_IntuitiveUse_1, UEQ_IntuitiveUse_2, UEQ_IntuitiveUse_3, UEQ_IntuitiveUse_4)) - 4,
    UEQ_Clarity_Score = mean(c(UEQ_Clarity_1, UEQ_Clarity_2, UEQ_Clarity_3, UEQ_Clarity_4)) - 4,
    
    UEQ_Overall_Score = mean(c(UEQ_Efficiency_1, UEQ_Efficiency_2, UEQ_Efficiency_3, UEQ_Efficiency_4, UEQ_Perspicuity_1, UEQ_Perspicuity_2, UEQ_Perspicuity_3, UEQ_Perspicuity_4, UEQ_Dependability_1, UEQ_Dependability_2, UEQ_Dependability_3, UEQ_Dependability_4, UEQ_Stimulation_1, UEQ_Stimulation_2, UEQ_Stimulation_3, UEQ_Stimulation_4, UEQ_Novelty_1, UEQ_Novelty_2, UEQ_Novelty_3, UEQ_Novelty_4, UEQ_Haptics_1, UEQ_Haptics_2, UEQ_Haptics_3, UEQ_Haptics_4, UEQ_Adaptability_1, UEQ_Adaptability_2, UEQ_Adaptability_3, UEQ_Adaptability_4, UEQ_Usefulness_1, UEQ_Usefulness_2, UEQ_Usefulness_3, UEQ_Usefulness_4, UEQ_Clarity_1, UEQ_Clarity_2, UEQ_Clarity_3, UEQ_Clarity_4)) - 4,
  ) %>%
  ungroup()
```

# Statistical Analyses

## Setup libraries and functions

```{r message=FALSE}
library(rstatix)
library(psych)
library(effectsize)
library(knitr)
library(psychReport)
library(MetBrewer)
library(viridis)
library(ggsci)
library(ggpubr)

# plot functions
my_boxplot <- function(data, x, y, title, xlab, ylab, xticklabs) {
  my_plot <- ggboxplot(
    data,
    x = x, 
    y = y, 
    fill = x,
    add = "jitter",
    ci = 0.95,
    title = title,
    xlab = xlab,
    ylab = ylab,
    size = 1
  ) + 
  theme(
    axis.title.y = element_text(margin = margin(r = 10)),
    text = element_text(size = 16)
  ) +
  labs(
    fill=xlab
  ) +
  grids(linetype = "dashed") +
  scale_x_discrete(labels=xticklabs) + 
  scale_fill_discrete(type=c("#EE442F", "#63ACBE"), labels=xticklabs) +
  scale_shape_discrete(labels=xticklabs)

  return(my_plot)
}

# unused
my_ueq_boxplot <- function(data, x, y, group, title, xlab, ylab, xticklabs, groupticklabs) {
  my_plot <- ggboxplot(
    data,
    x = x, 
    y = y, 
    fill = group,
    #add = "jitter",
    ci = 0.95,
    #title = title,
    xlab = xlab,
    ylab = ylab,
    size = 1,
    # position = position_dodge(width = 0.10), 
  ) + 
  theme(
    axis.text.x = element_text(angle = -45, hjust = 0.5),
    axis.title.y = element_text(margin = margin(r = 10)),
    text = element_text(size = 16)
  ) +
  labs(
    fill=NULL,
  ) +
  grids(linetype = "dashed") +
  scale_x_discrete(labels=xticklabs) +
  scale_fill_discrete(type=c("#EE442F", "#63ACBE"), labels=groupticklabs)
   
   # + 
     # geom_rect(aes(ymin = 2, ymax = 3, xmin = -Inf, xmax = Inf),
     #               fill = "#4c891e", alpha = 0.03) + 
     # geom_rect(aes(ymin = 1, ymax = 2, xmin = -Inf, xmax = Inf),
     #               fill = "#6cad2c", alpha = 0.03) + 
     # geom_rect(aes(ymin = -1, ymax = 1, xmin = -Inf, xmax = Inf),
     #               fill = "#ffffcc", alpha = 0.03) + 
     # geom_rect(aes(ymin = -2, ymax = -1, xmin = -Inf, xmax = Inf),
     #               fill = "#fb4d4b", alpha = 0.03) + 
     # geom_rect(aes(ymin = -3, ymax = -2, xmin = -Inf, xmax = Inf),
     #               fill = "#da311d", alpha = 0.03)
  
  return(my_plot)
}
```

## Demographic data (Descriptive Data)

### Age, Gender, Pre-Experience, Creativity

```{r}
data_long %>%
  select(id, age, pre_experience, creativity) %>%
  distinct() %>%
  get_summary_stats(age, pre_experience, creativity, type="common")
```

### Gender

```{r}
data_long %>%
  select(id, gender) %>%
  distinct() %>%
  "$"(gender) %>%
  factor() %>%
  summary()
```

## Modeling Time

### Time vs System

#### Visualize

```{r}
my_plot <- my_boxplot(data_long,
    x = "system",
    y = "time_s",
    title = NULL,
    ylab = "Modeling Time [seconds]",
    xlab = "",
    xticklabs = c("Blender", "SandScaper")
    )

ggsave(filename = "plots/time_vs_system.png", plot = my_plot)

my_plot
```

#### Descriptive Data

```{r}
```

#### Test

```{r}
```

### Time vs Image

#### Visualize

```{r}
my_plot <- my_boxplot(data_long,
    x = "image",
    y = "time_s",
    title = NULL,
    ylab = "Modeling Time [seconds]",
    xlab = "",
    xticklabs = c("Image A", "Image B")
    )

ggsave(filename = "plots/time_vs_image.png", plot = my_plot)

my_plot
```

#### Descriptive Data

```{r}
```

#### Test

```{r}
```

## Result Satisfaction

### Result Satisfaction vs System

#### Visualize

```{r}
my_plot <- my_boxplot(data_long,
    x = "system",
    y = "result_satisfaction",
    title = NULL,
    ylab = "Result Satisfaction",
    xlab = "",
    xticklabs = c("Blender", "SandScaper")
    )

ggsave(filename = "plots/result_vs_system.png", plot = my_plot)

my_plot
```

#### Descriptive Data

```{r}
```

#### Test

```{r}
```

### Result Satisfaction vs Image

#### Visualize

```{r}
my_plot <- my_boxplot(data_long,
    x = "image",
    y = "result_satisfaction",
    title = NULL,
    ylab = "Result Satisfaction",
    xlab = "",
    xticklabs = c("Image A", "Image B")
    )

ggsave(filename = "plots/result_vs_image.png", plot = my_plot)

my_plot
```

#### Descriptive Data

```{r}
```

#### Test

```{r}
```

## UEQ Single Categories

### UEQ Single Categories vs System

#### Visualize

```{r}

ueq_cols <- c("UEQ_Efficiency_Score", "UEQ_Perspicuity_Score", "UEQ_Dependability_Score", "UEQ_Stimulation_Score", "UEQ_Novelty_Score", "UEQ_Haptics_Score", "UEQ_Adaptability_Score", "UEQ_Usefulness_Score", "UEQ_IntuitiveUse_Score", "UEQ_Clarity_Score")

ueq_col_names <- c("Efficiency", "Perspicuity", "Dependability", "Stimulation", "Novelty", "Haptics", "Adaptability", "Usefulness", "Intuitive Use", "Clarity")

x <- "Var"
y <- "Val"
group <- "system"
title <- NULL
xlab <- ""
ylab <- "UEQ Score"
xticklabs <- ueq_col_names
groupticklabs <- c("Blender", "SandScaper")


my_plot <- data_long %>% select(id, system, all_of(ueq_cols)) %>%
  pivot_longer(., cols = all_of(ueq_cols), names_to = "Var", values_to = "Val") %>%
  ggplot(aes_string(
    x=x, 
    y=y,
    fill=group
  )) +
  geom_boxplot(
    width = 0.6,
    position=position_dodge(0.7),
  ) + 
  geom_dotplot(
    binaxis  = "y", 
    binwidth = 0.2,
    stackdir = "center",
    position = position_dodge(0.7)
  ) +
  labs(
    x=xlab,
    y=ylab,
    fill=NULL
  ) + 
  theme_pubr() +
  theme(
    axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5),
    axis.title.y = element_text(margin = margin(r = 10)),
    text = element_text(size = 16)
  ) + 
  grids(linetype = "dashed") +
  scale_x_discrete(labels=xticklabs) +
  scale_fill_discrete(type=c("#EE442F", "#63ACBE"), labels=groupticklabs)

ggsave(filename = "plots/ueq_categories_vs_system.png", plot = my_plot)

my_plot
```

#### Descriptive Data

```{r}
```

#### Test

```{r}
```

### UEQ Single Categories vs Image

#### Visualize

```{r}
ueq_cols <- c("UEQ_Efficiency_Score", "UEQ_Perspicuity_Score", "UEQ_Dependability_Score", "UEQ_Stimulation_Score", "UEQ_Novelty_Score", "UEQ_Haptics_Score", "UEQ_Adaptability_Score", "UEQ_Usefulness_Score", "UEQ_IntuitiveUse_Score", "UEQ_Clarity_Score")

ueq_col_names <- c("Efficiency", "Perspicuity", "Dependability", "Stimulation", "Novelty", "Haptics", "Adaptability", "Usefulness", "Intuitive Use", "Clarity")

x <- "Var"
y <- "Val"
group <- "image"
title <- NULL
xlab <- ""
ylab <- "UEQ Score"
xticklabs <- ueq_col_names
groupticklabs <- c("Image A", "Image A")


my_plot <- data_long %>% select(id, image, all_of(ueq_cols)) %>%
  pivot_longer(., cols = all_of(ueq_cols), names_to = "Var", values_to = "Val") %>%
  ggplot(aes_string(
    x=x, 
    y=y,
    fill=group
  )) +
  geom_boxplot(
    width = 0.6,
    position=position_dodge(0.7),
  ) + 
  geom_dotplot(
    binaxis  = "y",
    binwidth = 0.2,
    stackdir = "center",
    position = position_dodge(0.7)
  ) +
  labs(
    x=xlab,
    y=ylab,
    fill=NULL
  ) + 
  theme_pubr() +
  theme(
    axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5),
    axis.title.y = element_text(margin = margin(r = 10)),
    text = element_text(size = 16)
  ) + 
  grids(linetype = "dashed") +
  scale_x_discrete(labels=xticklabs) +
  scale_fill_discrete(type=c("#EE442F", "#63ACBE"), labels=groupticklabs)

ggsave(filename = "plots/ueq_categories_vs_image.png", plot = my_plot)

my_plot
```

#### Descriptive Data

```{r}
```

#### Test

```{r}
```

## UEQ Overall

### UEQ Overall vs System

#### Visualize

```{r}
my_plot <- my_boxplot(data_long,
    x = "system",
    y = "UEQ_Overall_Score",
    title = NULL,
    ylab = "UEQ Score",
    xlab = "",
    xticklabs = c("Blender", "SandScaper")
    )

ggsave(filename = "plots/ueq_overall_vs_system.png", plot = my_plot)

my_plot
```

#### Descriptive Data

```{r}
```

#### Test

```{r}
```

### UEQ Overall vs Image

#### Visualize

```{r}
my_plot <- my_boxplot(data_long,
    x = "image",
    y = "UEQ_Overall_Score",
    title = NULL,
    ylab = "UEQ Score",
    xlab = "",
    xticklabs = c("Image A", "Image B")
    )

ggsave(filename = "plots/ueq_overall_vs_image.png", plot = my_plot)

my_plot
```

#### Descriptive Data

```{r}
```

#### Test

```{r}
```
